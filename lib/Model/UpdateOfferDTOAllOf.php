<?php
/**
 * UpdateOfferDTOAllOf
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  YandexMarketApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YandexMarketApi\Model;

use \ArrayAccess;
use \YandexMarketApi\ObjectSerializer;

/**
 * UpdateOfferDTOAllOf Class Doc Comment
 *
 * @category Class
 * @package  YandexMarketApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateOfferDTOAllOf implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateOfferDTO_allOf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'parameter_values' => '\YandexMarketApi\Model\ParameterValueDTO[]',
        'basic_price' => '\YandexMarketApi\Model\UpdatePriceWithDiscountDTO',
        'purchase_price' => '\YandexMarketApi\Model\BasePriceDTO',
        'additional_expenses' => '\YandexMarketApi\Model\BasePriceDTO',
        'cofinance_price' => '\YandexMarketApi\Model\BasePriceDTO',
        'first_video_as_cover' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'parameter_values' => null,
        'basic_price' => null,
        'purchase_price' => null,
        'additional_expenses' => null,
        'cofinance_price' => null,
        'first_video_as_cover' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'parameter_values' => true,
		'basic_price' => false,
		'purchase_price' => false,
		'additional_expenses' => false,
		'cofinance_price' => false,
		'first_video_as_cover' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'parameter_values' => 'parameterValues',
        'basic_price' => 'basicPrice',
        'purchase_price' => 'purchasePrice',
        'additional_expenses' => 'additionalExpenses',
        'cofinance_price' => 'cofinancePrice',
        'first_video_as_cover' => 'firstVideoAsCover'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'parameter_values' => 'setParameterValues',
        'basic_price' => 'setBasicPrice',
        'purchase_price' => 'setPurchasePrice',
        'additional_expenses' => 'setAdditionalExpenses',
        'cofinance_price' => 'setCofinancePrice',
        'first_video_as_cover' => 'setFirstVideoAsCover'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'parameter_values' => 'getParameterValues',
        'basic_price' => 'getBasicPrice',
        'purchase_price' => 'getPurchasePrice',
        'additional_expenses' => 'getAdditionalExpenses',
        'cofinance_price' => 'getCofinancePrice',
        'first_video_as_cover' => 'getFirstVideoAsCover'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('parameter_values', $data ?? [], null);
        $this->setIfExists('basic_price', $data ?? [], null);
        $this->setIfExists('purchase_price', $data ?? [], null);
        $this->setIfExists('additional_expenses', $data ?? [], null);
        $this->setIfExists('cofinance_price', $data ?? [], null);
        $this->setIfExists('first_video_as_cover', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['parameter_values']) && (count($this->container['parameter_values']) > 300)) {
            $invalidProperties[] = "invalid value for 'parameter_values', number of items must be less than or equal to 300.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets parameter_values
     *
     * @return \YandexMarketApi\Model\ParameterValueDTO[]|null
     */
    public function getParameterValues()
    {
        return $this->container['parameter_values'];
    }

    /**
     * Sets parameter_values
     *
     * @param \YandexMarketApi\Model\ParameterValueDTO[]|null $parameter_values Список характеристик с их значениями.  С `parameterValues` обязательно передавайте `marketCategoryId` — идентификатор категории на Маркете, к которой относятся указанные характеристики товара.  При **изменении** характеристик передавайте только те, значение которых нужно обновить. Если в `marketCategoryId` вы меняете категорию, значения общих характеристик для старой и новой категории сохранятся, передавать их не нужно.  Чтобы **удалить** значение заданной характеристики, передайте ее `parameterId` с пустым `value`.  Максимальное количество характеристик — 300.
     *
     * @return self
     */
    public function setParameterValues($parameter_values)
    {
        if (is_null($parameter_values)) {
            array_push($this->openAPINullablesSetToNull, 'parameter_values');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parameter_values', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($parameter_values) && (count($parameter_values) > 300)) {
            throw new \InvalidArgumentException('invalid value for $parameter_values when calling UpdateOfferDTOAllOf., number of items must be less than or equal to 300.');
        }
        $this->container['parameter_values'] = $parameter_values;

        return $this;
    }

    /**
     * Gets basic_price
     *
     * @return \YandexMarketApi\Model\UpdatePriceWithDiscountDTO|null
     */
    public function getBasicPrice()
    {
        return $this->container['basic_price'];
    }

    /**
     * Sets basic_price
     *
     * @param \YandexMarketApi\Model\UpdatePriceWithDiscountDTO|null $basic_price basic_price
     *
     * @return self
     */
    public function setBasicPrice($basic_price)
    {
        if (is_null($basic_price)) {
            throw new \InvalidArgumentException('non-nullable basic_price cannot be null');
        }
        $this->container['basic_price'] = $basic_price;

        return $this;
    }

    /**
     * Gets purchase_price
     *
     * @return \YandexMarketApi\Model\BasePriceDTO|null
     */
    public function getPurchasePrice()
    {
        return $this->container['purchase_price'];
    }

    /**
     * Sets purchase_price
     *
     * @param \YandexMarketApi\Model\BasePriceDTO|null $purchase_price purchase_price
     *
     * @return self
     */
    public function setPurchasePrice($purchase_price)
    {
        if (is_null($purchase_price)) {
            throw new \InvalidArgumentException('non-nullable purchase_price cannot be null');
        }
        $this->container['purchase_price'] = $purchase_price;

        return $this;
    }

    /**
     * Gets additional_expenses
     *
     * @return \YandexMarketApi\Model\BasePriceDTO|null
     */
    public function getAdditionalExpenses()
    {
        return $this->container['additional_expenses'];
    }

    /**
     * Sets additional_expenses
     *
     * @param \YandexMarketApi\Model\BasePriceDTO|null $additional_expenses additional_expenses
     *
     * @return self
     */
    public function setAdditionalExpenses($additional_expenses)
    {
        if (is_null($additional_expenses)) {
            throw new \InvalidArgumentException('non-nullable additional_expenses cannot be null');
        }
        $this->container['additional_expenses'] = $additional_expenses;

        return $this;
    }

    /**
     * Gets cofinance_price
     *
     * @return \YandexMarketApi\Model\BasePriceDTO|null
     */
    public function getCofinancePrice()
    {
        return $this->container['cofinance_price'];
    }

    /**
     * Sets cofinance_price
     *
     * @param \YandexMarketApi\Model\BasePriceDTO|null $cofinance_price cofinance_price
     *
     * @return self
     */
    public function setCofinancePrice($cofinance_price)
    {
        if (is_null($cofinance_price)) {
            throw new \InvalidArgumentException('non-nullable cofinance_price cannot be null');
        }
        $this->container['cofinance_price'] = $cofinance_price;

        return $this;
    }

    /**
     * Gets first_video_as_cover
     *
     * @return bool|null
     */
    public function getFirstVideoAsCover()
    {
        return $this->container['first_video_as_cover'];
    }

    /**
     * Sets first_video_as_cover
     *
     * @param bool|null $first_video_as_cover Использовать первое видео в карточке как видеообложку.  Передайте `true`, чтобы первое видео использовалось как видеообложка, или `false`, чтобы видеообложка не отображалась в карточке товара.
     *
     * @return self
     */
    public function setFirstVideoAsCover($first_video_as_cover)
    {
        if (is_null($first_video_as_cover)) {
            throw new \InvalidArgumentException('non-nullable first_video_as_cover cannot be null');
        }
        $this->container['first_video_as_cover'] = $first_video_as_cover;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


